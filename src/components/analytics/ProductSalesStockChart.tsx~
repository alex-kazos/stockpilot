import React, { useState, useMemo, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { DashboardProduct, DashboardOrder } from '../../types/dashboard';
import { mergeProductsBySku } from '../../utils/productMerger';
import { Search, ChevronLeft, ChevronRight, ArrowUpDown, Calendar } from 'lucide-react';
import { useFilter } from '../../contexts/FilterContext';

interface ProductSalesStockChartProps {
  products: DashboardProduct[];
  orders: DashboardOrder[];
}

interface ChartDataItem {
  name: string;
  fullName: string;
  sku: string;
  sales: number;
  stock: number;
  category: string;
  revenue: number;
}

interface DateRange {
  from: string;
  to: string;
}

interface SortConfig {
  key: 'name' | 'sales' | 'stock';
  direction: 'asc' | 'desc';
}

const CustomTooltip: React.FC<any> = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    const { fullName, sku } = payload[0]?.payload || {};
    return (
      <div className="bg-[#1A1A27] p-4 rounded-lg shadow-lg border-0">
        <p className="text-white font-medium mb-2 text-base">{fullName}</p>
        <p className="text-gray-400 text-xs mb-3">SKU: {sku || 'N/A'}</p>
        {payload.map((entry: any, index: number) => (
          <p key={index} className={`text-sm font-medium ${entry.name === 'Stock' ? 'text-indigo-400' : 'text-emerald-400'} mb-1`}>
            {entry.name}: {entry.value.toLocaleString()}
          </p>
        ))}
      </div>
    );
  }
  return null;
};

export const ProductSalesStockChart: React.FC<ProductSalesStockChartProps> = ({ products, orders }) => {
  const { dateRange } = useFilter();
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'sales', direction: 'desc' });
  const itemsPerPage = 10;

  // Validate input data
  if (!products || !Array.isArray(products) || !orders || !Array.isArray(orders)) {
    console.error('Invalid input data:', { products, orders });
    return (
      <div className="p-4 text-center">
        <p className="text-gray-400">No data available for chart visualization</p>
      </div>
    );
  }

  // Get unique categories
  const categories = useMemo(() => {
    const uniqueCategories = new Set(products.map(p => p.product_type || 'Uncategorized'));
    return ['all', ...Array.from(uniqueCategories)].sort();
  }, [products]);

  // Process chart data
  const chartData = useMemo(() => {
    try {
      // Filter products by category if needed
      let filteredProducts = products;
      if (selectedCategory !== 'all') {
        filteredProducts = products.filter(p => p.product_type === selectedCategory);
      }

      // Map products to chart format with sales data
      return filteredProducts.map(product => {
        // Get all line items for this product within date range
        const productLineItems = orders.flatMap(order => {
          if (!order.line_items || !order.created_at) return [];
          
          const orderDate = new Date(order.created_at);
          const fromDate = dateRange?.from ? new Date(dateRange.from) : new Date(0);
          const toDate = dateRange?.to ? new Date(dateRange.to) : new Date();

          if (orderDate >= fromDate && orderDate <= toDate) {
            return order.line_items
              .filter(item => item.product_id === product.id)
              .map(item => ({
                ...item,
                orderDate
              }));
          }
          return [];
        });

        // Calculate total sales quantity
        const sales = productLineItems.reduce((sum, item) => {
          return sum + (item.quantity || 0);
        }, 0);

        // Calculate total revenue (for future use)
        const revenue = productLineItems.reduce((sum, item) => {
          const price = parseFloat(item.price || '0');
          return sum + (price * (item.quantity || 0));
        }, 0);

        // Format the data for the chart
        return {
          name: product.name.length > 20 ? `${product.name.substring(0, 20)}...` : product.name,
          fullName: product.name,
          sku: product.sku,
          sales,
          stock: product.stock,
          category: product.product_type || 'Uncategorized',
          revenue // Store revenue for future use
        };
      });
    } catch (error) {
      console.error('Error processing chart data:', error);
      return [];
    }
  }, [products, orders, selectedCategory, dateRange]);

  // Log the chart data for debugging
  useEffect(() => {
    console.log('Chart Data:', {
      filteredProducts: products.length,
      filteredOrders: orders.length,
      chartDataLength: chartData.length,
      firstItem: chartData[0],
      dateRange
    });
  }, [chartData, products, orders, dateRange]);

  // Apply search filter
  const filteredData = useMemo(() => {
    if (!chartData) return [];
    
    return chartData.filter(item => {
      const searchLower = searchQuery.toLowerCase();
      return (
        item.name.toLowerCase().includes(searchLower) ||
        item.sku.toLowerCase().includes(searchLower) ||
        item.category.toLowerCase().includes(searchLower)
      );
    });
  }, [chartData, searchQuery]);

  // Sort data
  const sortedData = useMemo(() => {
    if (!filteredData) return [];

    return [...filteredData].sort((a, b) => {
      const factor = sortConfig.direction === 'asc' ? 1 : -1;
      if (sortConfig.key === 'name') {
        return factor * a.name.localeCompare(b.name);
      }
      return factor * (a[sortConfig.key] - b[sortConfig.key]);
    });
  }, [filteredData, sortConfig]);

  // Paginate data
  const paginatedData = sortedData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const totalPages = Math.ceil(sortedData.length / itemsPerPage);

  if (paginatedData.length === 0) {
    return (
      <div className="p-4 text-center">
        <p className="text-gray-400">No data available for the selected filters</p>
      </div>
    );
  }

  const handleSort = (key: SortConfig['key']) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'desc' ? 'asc' : 'desc'
    }));
  };

  const handlePageChange = (direction: 'prev' | 'next') => {
    if (direction === 'prev') {
      setCurrentPage(prev => Math.max(1, prev - 1));
    } else {
      setCurrentPage(prev => Math.min(totalPages, prev + 1));
    }
  };

  return (
    <div className="w-full h-full">
      <div className="space-y-4">
        <div className="flex flex-wrap gap-4 items-center">
          <div className="flex-1 min-w-[200px]">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search products..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full bg-[#1F1D2A] text-gray-300 border border-gray-700 rounded-lg pl-10 pr-4 py-1.5 text-sm focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 hover:bg-[#1C1B23] transition-colors duration-200"
              />
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="bg-[#1F1D2A] text-gray-300 border border-gray-700 rounded-lg px-3 py-1.5 text-sm focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 hover:bg-[#1C1B23] transition-colors duration-200"
            >
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => handleSort('name')}
              className={`flex items-center space-x-1 px-3 py-1.5 rounded-lg text-sm ${
                sortConfig.key === 'name' ? 'text-indigo-400' : 'text-gray-400'
              } hover:bg-[#1C1B23] transition-colors duration-200`}
            >
              <span>Name</span>
              <ArrowUpDown className="w-4 h-4" />
            </button>
            <button
              onClick={() => handleSort('sales')}
              className={`flex items-center space-x-1 px-3 py-1.5 rounded-lg text-sm ${
                sortConfig.key === 'sales' ? 'text-indigo-400' : 'text-gray-400'
              } hover:bg-[#1C1B23] transition-colors duration-200`}
            >
              <span>Sales</span>
              <ArrowUpDown className="w-4 h-4" />
            </button>
            <button
              onClick={() => handleSort('stock')}
              className={`flex items-center space-x-1 px-3 py-1.5 rounded-lg text-sm ${
                sortConfig.key === 'stock' ? 'text-indigo-400' : 'text-gray-400'
              } hover:bg-[#1C1B23] transition-colors duration-200`}
            >
              <span>Stock</span>
              <ArrowUpDown className="w-4 h-4" />
            </button>
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
              className="p-1 rounded-lg text-gray-400 hover:text-gray-300 disabled:opacity-50"
            >
              <ChevronLeft className="w-5 h-5" />
            </button>
            <span className="text-sm text-gray-400">
              Page {currentPage} of {totalPages}
            </span>
            <button
              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
              disabled={currentPage === totalPages}
              className="p-1 rounded-lg text-gray-400 hover:text-gray-300 disabled:opacity-50"
            >
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>

      <div className="bg-[#1C1B23] border-2 border-gray-800 rounded-lg p-4 hover:bg-[#1F1D2A] transition-colors duration-200">
        <ResponsiveContainer width="100%" height={400}>
          <BarChart
            data={paginatedData}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            cursor={{ fill: 'rgba(255, 255, 255, 0.05)' }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="#2D2B3B" />
            <XAxis 
              dataKey="name" 
              stroke="#9CA3AF"
              tick={{ fill: '#9CA3AF' }}
              tickLine={{ stroke: '#4B5563' }}
            />
            <YAxis 
              yAxisId="left"
              stroke="#9CA3AF"
              tick={{ fill: '#9CA3AF' }}
              tickLine={{ stroke: '#4B5563' }}
            />
            <YAxis 
              yAxisId="right" 
              orientation="right"
              stroke="#9CA3AF"
              tick={{ fill: '#9CA3AF' }}
              tickLine={{ stroke: '#4B5563' }}
            />
            <Tooltip content={<CustomTooltip />} />
            <Legend />
            <Bar 
              yAxisId="left"
              dataKey="sales" 
              name="Sales" 
              fill="#10B981" 
              radius={[4, 4, 0, 0]}
            />
            <Bar 
              yAxisId="right"
              dataKey="stock" 
              name="Stock" 
              fill="#6366F1" 
              radius={[4, 4, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div className="flex justify-between items-center mt-4">
        <button
          onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
          disabled={currentPage === 1}
          className="flex items-center space-x-1 px-3 py-1.5 text-sm text-gray-300 bg-[#1F1D2A] rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#2D2B3B] transition-colors duration-200"
        >
          <ChevronLeft className="w-4 h-4" />
          <span>Previous</span>
        </button>
        <span className="text-gray-400">
          Page {currentPage} of {totalPages}
        </span>
        <button
          onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
          disabled={currentPage === totalPages}
          className="flex items-center space-x-1 px-3 py-1.5 text-sm text-gray-300 bg-[#1F1D2A] rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#2D2B3B] transition-colors duration-200"
        >
          <span>Next</span>
          <ChevronRight className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
};